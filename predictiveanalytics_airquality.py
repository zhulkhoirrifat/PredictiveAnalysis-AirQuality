# -*- coding: utf-8 -*-
"""PredictiveAnalytics-AirQuality.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15vBf2xERCZP5mcID99jMfFcQ-DobjH0n

# Air Quality - Huairou Station (Beijing)

## Import Library
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor, IsolationForest
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

"""## Data Understanding"""

df = pd.read_csv('data.csv')
df

df.info()

df.describe()

"""| Nama Variabel | Deskripsi |
|--------------|-----------|
| No | Nomor urut data (index dari dataset) |
| year |Tahun pengambilan data |
| month |Bulan pengambilan data (1 = Januari, 2 = Februari, dst.) |
| day | Hari dalam bulan pengambilan data |
| hour | Jam dalam hari pengambilan data (format 24 jam) |
| PM2.5 | Konsentrasi PM2.5 dalam µg/m³ (partikel halus dengan diameter ≤2.5µm) |
| PM10 | Konsentrasi PM10 dalam µg/m³ (partikel kasar dengan diameter ≤10µm) |
| SO2 | Konsentrasi Sulfur Dioksida (SO₂) dalam µg/m³ |
| NO2 | Konsentrasi Nitrogen Dioksida (NO₂) dalam µg/m³ |
| CO | Konsentrasi Karbon Monoksida (CO) dalam mg/m³ |
| O3 | Konsentrasi Ozon (O₃) dalam µg/m³ |
| TEMP | Temperatur udara dalam derajat Celcius (°C) |
| PRES | Tekanan atmosfer dalam hPa (hectopascal) |
| DEWP | Dew Point (Titik Embun) dalam °C (suhu di mana udara mulai mengembun) |
| RAIN | Curah hujan dalam mm |
| wd | Arah angin (dalam bentuk kategori, misalnya: N, NW, SE, dll.) |
| WSPM | Kecepatan angin dalam m/s |
| station | Nama stasiun pemantauan (dalam dataset ini: "Huairou") |

Kolom wd menjadi satu-satunya kolom categorical.

### Data Cleaning

Cek dan hapus baris data yang hilang
"""

print(df.isnull().sum())

df = df.dropna()
len(df)

"""Cek data duplikat"""

df.duplicated().sum()

"""- Terdapat 3356 baris data yang memiliki data kosong. Karena datanya 35064 jadi perubahan datanya tidak terlalu signifikan
- Tidak ada data duplikasi pada dataset ini
- Outlier tidak dihapus karena mencari pola anomali menggunakan IsolationForest

### EDA - Univariate Analysis
"""

df.describe(include='all')

df.hist(bins=50, figsize=(20,15))
plt.show()

"""Dilihat dari histogram variabel 'PM2.5', yang merupakan target fitur (label),
Data distribusi menunjukkan Miring ke Kanan, Pola ini menunjukkan bahwa konsentrasi partikel halus di udara umumnya dalam batas aman, tetapi terdapat periode di mana jumlahnya meningkat tajam. Partikel halus ini sangat berbahaya karena dapat masuk ke dalam sistem pernapasan manusia dan sering kali meningkat akibat pembakaran bahan bakar dan aktivitas industri.
"""

count = df['wd'].value_counts()
percent = 100*df['wd'].value_counts(normalize=True)
count_percent = pd.DataFrame({'Count':count, 'Percent':percent.round(1)})
print(count_percent)
count.plot(kind='bar', title='Wind Direction')

"""Terdapat 16 kategori yang mempresentasikan mata angin pada fitur wd, dari data tersebut bisa disimpulkan bahwa datanya hampir merata dengan yang tertinggi pada hari pada arah barat laut yaitu 14.4% dan arah selatan yang paling kecil datanya dengan presentase 3.8 persen.

### EDA - Multivariate Analysis
"""

sns.pairplot(df, diag_kind='kde')
plt.show()

"""Berdasarkan scatter plot diatas CO, NO2, SO2, PM10 terlihat berhubungan dengan PM2.5 secara positif."""

sns.catplot(x='wd', y='PM2.5', kind='bar', height=4, aspect=3, data=df)
plt.title(f'Rata-rata kecepatan angin terhadap PM2.5')
plt.show()

"""- Beberapa arah angin seperti SSE (South-Southeast) dan WNW (West-Northwest) memiliki PM2.5 tertinggi, yang berarti polusi lebih banyak ketika angin bertiup dari arah ini.
- Jika angin datang dari arah dengan PM2.5 tinggi, kemungkinan daerah tersebut memiliki sumber pencemaran signifikan (misalnya industri, pembakaran sampah, atau aktivitas kendaraan berat). Jika angin datang dari arah dengan PM2.5 rendah, kemungkinan angin membawa udara lebih bersih, atau ada faktor geografis yang membantu menyebarkan polutan.
"""

numerical_df = df.select_dtypes(include=['number'])
scaled_data = StandardScaler().fit_transform(numerical_df)

pca = PCA(n_components=2)
pca.fit(scaled_data)

loadings = pd.DataFrame(
    pca.components_.T,
    columns=[f"PC{i+1}" for i in range(pca.n_components_)],
    index=numerical_df.columns
)

plt.figure(figsize=(8, 6))
plt.scatter(loadings.iloc[:, 0], loadings.iloc[:, 1], color='blue')

highlight_features = ['PM2.5', 'SO2', 'NO2', 'CO', 'TEMP', 'PRES', 'DEWP', 'WSPM', 'RAIN', 'O3']
for feature in highlight_features:
    if feature in loadings.index:
        plt.scatter(loadings.loc[feature, "PC1"], loadings.loc[feature, "PC2"], color='red')
        plt.text(loadings.loc[feature, "PC1"], loadings.loc[feature, "PC2"], feature, fontsize=12, ha='right', va='bottom', color='red')

plt.axhline(0, color='gray', linestyle='--', linewidth=1)
plt.axvline(0, color='gray', linestyle='--', linewidth=1)
plt.xlabel("PC1 Loadings")
plt.ylabel("PC2 Loadings")
plt.title("Scatter Plot Loadings (PC1 vs PC2) - Highlighted Features")
plt.grid(True)
plt.show()

"""Berdasarkan scatter plot diatas, PM2.5, SO2, NO2, CO, TEMP, PRES, DEWP, WSPM akan digunakan sebagai fitur untuk membuat model."""

numerical_df = df.select_dtypes(include=['number'])

plt.figure(figsize=(12,6))
corr_matrix = numerical_df.corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Korelasi Antar Variabel')
plt.show()

"""Korelasi antar variabel menunjukkan bahwa PM2.5 memiliki hubungan kuat dengan polutan lain seperti CO, NO2 dan SO2, yang umumnya berasal dari kendaraan dan industri. Ozon (O3) menunjukkan pola kebalikan dengan NO2 dan CO, karena terbentuk melalui reaksi fotokimia di udara. Dengan memahami hubungan ini, strategi pengendalian polusi dapat difokuskan pada pengurangan emisi dan pemanfaatan faktor lingkungan untuk meningkatkan kualitas udara.

## Data Preparation

Sebelum membuat model, data disiapkan melalui 3 proses yaitu:
- Encoding fitur kategori menggunakan
- Pembagian dataset menjadi data latih dan data uji
- Standarisasi
"""

le = LabelEncoder()
df['wd'] = le.fit_transform(df['wd'])

df

X = df.drop('PM2.5', axis=1)
X = df.drop('station', axis=1)
y = df['PM2.5']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
features = ['TEMP', 'PRES', 'DEWP', 'WSPM', 'wd', 'SO2', 'NO2', 'CO']
scaler.fit(X_train[features])
X_train[features] = scaler.transform(X_train[features])
X_train[features].head()

"""## Modeling"""

models = {
    'RF': RandomForestRegressor(),
    'SVM': SVR(),
    'KNN': KNeighborsRegressor(),
    'DT': DecisionTreeRegressor()
}

result = {}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    result[name] = {
        'MAE': mean_absolute_error(y_test, y_pred),
        'MSE': mean_squared_error(y_test, y_pred),
        'R2-Score': r2_score(y_test, y_pred)
    }

pd.DataFrame(result)

"""Decision Tree adalah model dengan performa yang paling terbaik"""

param_grid = {
    'max_depth': [5, 10, 20, None],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(DecisionTreeRegressor(random_state=42), param_grid, cv=5, scoring='r2', n_jobs=-1)
grid_search.fit(X_train, y_train)

best_dt = grid_search.best_estimator_

y_pred_best = best_dt.predict(X_test)
print("Best Decision Tree R2 Score:", r2_score(y_test, y_pred_best))
print("Best Hyperparameters:", grid_search.best_params_)

"""### Isolation Forest"""

iso_forest = IsolationForest(contamination=0.05, random_state=42)
df['Anomaly'] = iso_forest.fit_predict(X)

sns.scatterplot(x=df.index, y=df['PM2.5'], hue=df['Anomaly'])
plt.show()

"""Sebagian besar anomali berada pada nilai PM2.5 yang tinggi (>200).
Ini bisa menunjukkan kejadian polusi ekstrem atau kesalahan sensor.
Puncak polusi yang sangat tinggi (>500) juga terdeteksi sebagai outlier, yang mungkin terjadi akibat kondisi lingkungan tertentu seperti kebakaran hutan atau pencemaran industri.
"""